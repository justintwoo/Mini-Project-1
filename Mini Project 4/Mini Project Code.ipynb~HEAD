{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import re\n",
    "import os\n",
    "import string\n",
    "import csv\n",
    "import sys\n",
    "import datetime\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import cross_val_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  ticker                         created            id  polarity1 sentiment  \\\n",
      "0    MMM  Mon Apr 04 18:53:44 +0000 2022  1.510000e+18   0.106667  positive   \n",
      "1    MMM  Mon Apr 04 16:55:27 +0000 2022  1.510000e+18   0.000000   neutral   \n",
      "2    MMM  Mon Apr 04 16:00:46 +0000 2022  1.510000e+18   0.000000   neutral   \n",
      "3    MMM  Mon Apr 04 14:30:00 +0000 2022  1.510000e+18   0.000000   neutral   \n",
      "4    MMM  Fri Apr 01 14:48:13 +0000 2022  1.510000e+18   1.000000  positive   \n",
      "\n",
      "   subjectivity1  polarity2  subjectivity2  \n",
      "0       0.526667   0.106667       0.526667  \n",
      "1       0.000000   0.000000       0.000000  \n",
      "2       0.100000   0.000000       0.000000  \n",
      "3       0.000000   0.000000       0.000000  \n",
      "4       0.300000   1.000000       0.300000  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ticker</th>\n",
       "      <th>change</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MMM</td>\n",
       "      <td>-0.016707</td>\n",
       "      <td>2513140.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AOS</td>\n",
       "      <td>-0.012981</td>\n",
       "      <td>1438000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ABT</td>\n",
       "      <td>-0.007476</td>\n",
       "      <td>4792400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ABBV</td>\n",
       "      <td>-0.001954</td>\n",
       "      <td>6620020.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ABMD</td>\n",
       "      <td>-0.017808</td>\n",
       "      <td>265680.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  ticker    change     volume\n",
       "0    MMM -0.016707  2513140.0\n",
       "1    AOS -0.012981  1438000.0\n",
       "2    ABT -0.007476  4792400.0\n",
       "3   ABBV -0.001954  6620020.0\n",
       "4   ABMD -0.017808   265680.0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweet_data = pd.read_csv(\"sentimenttweets.csv\")\n",
    "print(tweet_data.head())\n",
    "\n",
    "returns_data = pd.read_csv(\"stocks.csv\")\n",
    "returns_data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "377"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweet_data['ticker'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.03168971768928703"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "std_target = returns_data['change'].std()\n",
    "std_target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ticker</th>\n",
       "      <th>id</th>\n",
       "      <th>polarity1</th>\n",
       "      <th>subjectivity1</th>\n",
       "      <th>polarity2</th>\n",
       "      <th>subjectivity2</th>\n",
       "      <th>change</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>1.510000e+18</td>\n",
       "      <td>0.137614</td>\n",
       "      <td>0.277176</td>\n",
       "      <td>0.132364</td>\n",
       "      <td>0.272676</td>\n",
       "      <td>-0.014697</td>\n",
       "      <td>1827660.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AAL</td>\n",
       "      <td>1.510000e+18</td>\n",
       "      <td>0.092037</td>\n",
       "      <td>0.243148</td>\n",
       "      <td>0.055926</td>\n",
       "      <td>0.273704</td>\n",
       "      <td>-0.011634</td>\n",
       "      <td>29107200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AAP</td>\n",
       "      <td>1.510000e+18</td>\n",
       "      <td>0.106667</td>\n",
       "      <td>0.526667</td>\n",
       "      <td>0.106667</td>\n",
       "      <td>0.526667</td>\n",
       "      <td>-0.000425</td>\n",
       "      <td>679420.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>1.510000e+18</td>\n",
       "      <td>0.115024</td>\n",
       "      <td>0.333631</td>\n",
       "      <td>0.110274</td>\n",
       "      <td>0.360131</td>\n",
       "      <td>-0.015244</td>\n",
       "      <td>84850500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ABBV</td>\n",
       "      <td>1.510000e+18</td>\n",
       "      <td>0.287140</td>\n",
       "      <td>0.296502</td>\n",
       "      <td>0.287140</td>\n",
       "      <td>0.285391</td>\n",
       "      <td>-0.001954</td>\n",
       "      <td>6620020.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>322</th>\n",
       "      <td>TSCO</td>\n",
       "      <td>1.510000e+18</td>\n",
       "      <td>-0.046914</td>\n",
       "      <td>0.061728</td>\n",
       "      <td>-0.046914</td>\n",
       "      <td>0.061728</td>\n",
       "      <td>-0.035860</td>\n",
       "      <td>1221160.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>323</th>\n",
       "      <td>TT</td>\n",
       "      <td>1.510000e+18</td>\n",
       "      <td>0.120000</td>\n",
       "      <td>0.120000</td>\n",
       "      <td>0.120000</td>\n",
       "      <td>0.120000</td>\n",
       "      <td>-0.024213</td>\n",
       "      <td>1636140.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>324</th>\n",
       "      <td>WRB</td>\n",
       "      <td>1.510000e+18</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>-0.009839</td>\n",
       "      <td>1543620.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>325</th>\n",
       "      <td>XOM</td>\n",
       "      <td>1.510000e+18</td>\n",
       "      <td>0.157727</td>\n",
       "      <td>0.267273</td>\n",
       "      <td>0.157727</td>\n",
       "      <td>0.249091</td>\n",
       "      <td>-0.012533</td>\n",
       "      <td>22245760.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>326</th>\n",
       "      <td>XRAY</td>\n",
       "      <td>1.510000e+18</td>\n",
       "      <td>0.013333</td>\n",
       "      <td>0.490833</td>\n",
       "      <td>0.098750</td>\n",
       "      <td>0.485625</td>\n",
       "      <td>-0.018567</td>\n",
       "      <td>1539820.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>327 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    ticker            id  polarity1  subjectivity1  polarity2  subjectivity2  \\\n",
       "0        A  1.510000e+18   0.137614       0.277176   0.132364       0.272676   \n",
       "1      AAL  1.510000e+18   0.092037       0.243148   0.055926       0.273704   \n",
       "2      AAP  1.510000e+18   0.106667       0.526667   0.106667       0.526667   \n",
       "3     AAPL  1.510000e+18   0.115024       0.333631   0.110274       0.360131   \n",
       "4     ABBV  1.510000e+18   0.287140       0.296502   0.287140       0.285391   \n",
       "..     ...           ...        ...            ...        ...            ...   \n",
       "322   TSCO  1.510000e+18  -0.046914       0.061728  -0.046914       0.061728   \n",
       "323     TT  1.510000e+18   0.120000       0.120000   0.120000       0.120000   \n",
       "324    WRB  1.510000e+18   0.250000       0.333333   0.250000       0.333333   \n",
       "325    XOM  1.510000e+18   0.157727       0.267273   0.157727       0.249091   \n",
       "326   XRAY  1.510000e+18   0.013333       0.490833   0.098750       0.485625   \n",
       "\n",
       "       change      volume  \n",
       "0   -0.014697   1827660.0  \n",
       "1   -0.011634  29107200.0  \n",
       "2   -0.000425    679420.0  \n",
       "3   -0.015244  84850500.0  \n",
       "4   -0.001954   6620020.0  \n",
       "..        ...         ...  \n",
       "322 -0.035860   1221160.0  \n",
       "323 -0.024213   1636140.0  \n",
       "324 -0.009839   1543620.0  \n",
       "325 -0.012533  22245760.0  \n",
       "326 -0.018567   1539820.0  \n",
       "\n",
       "[327 rows x 8 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweet_agg = tweet_data.groupby(['ticker'],as_index=False).mean()\n",
    "pd_data = tweet_agg.merge(returns_data)\n",
    "pd_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-6-6b05766f9d27>:2: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n",
      "  pd_data.mean()\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "id               1.510000e+18\n",
       "polarity1        1.141889e-01\n",
       "subjectivity1    2.608926e-01\n",
       "polarity2        1.074615e-01\n",
       "subjectivity2    2.615511e-01\n",
       "change          -1.906662e-02\n",
       "volume           4.835353e+06\n",
       "dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pos_data = pd_data[pd_data['polarity2'] != 0]\n",
    "pd_data.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_sent(row):\n",
    "    if row[4] > 0:\n",
    "        val = 'positive'\n",
    "    elif row[4] < 0:\n",
    "        val = 'negative'\n",
    "    else:\n",
    "        val = 'neutral'\n",
    "    return val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>polarity1</th>\n",
       "      <th>subjectivity1</th>\n",
       "      <th>polarity2</th>\n",
       "      <th>subjectivity2</th>\n",
       "      <th>change</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sentiment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>negative</th>\n",
       "      <td>1.510000e+18</td>\n",
       "      <td>-0.061543</td>\n",
       "      <td>0.221550</td>\n",
       "      <td>-0.071874</td>\n",
       "      <td>0.219042</td>\n",
       "      <td>-0.023050</td>\n",
       "      <td>3.248039e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neutral</th>\n",
       "      <td>1.510000e+18</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.065343</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.065343</td>\n",
       "      <td>-0.011759</td>\n",
       "      <td>2.106414e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>positive</th>\n",
       "      <td>1.510000e+18</td>\n",
       "      <td>0.169172</td>\n",
       "      <td>0.308496</td>\n",
       "      <td>0.161689</td>\n",
       "      <td>0.309855</td>\n",
       "      <td>-0.019875</td>\n",
       "      <td>5.684443e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     id  polarity1  subjectivity1  polarity2  subjectivity2  \\\n",
       "sentiment                                                                     \n",
       "negative   1.510000e+18  -0.061543       0.221550  -0.071874       0.219042   \n",
       "neutral    1.510000e+18   0.000000       0.065343   0.000000       0.065343   \n",
       "positive   1.510000e+18   0.169172       0.308496   0.161689       0.309855   \n",
       "\n",
       "             change        volume  \n",
       "sentiment                          \n",
       "negative  -0.023050  3.248039e+06  \n",
       "neutral   -0.011759  2.106414e+06  \n",
       "positive  -0.019875  5.684443e+06  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd_data['sentiment'] = pd_data.apply(get_sent, axis=1)\n",
    "pd_data.groupby(['sentiment']).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "counts = pd_data['sentiment'].value_counts()\n",
    "counts.plot(kind='bar',rot=360)\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "42"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counts[2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Top 20 results\n"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD:Mini Project 4/Mini Project Code.ipynb
   "execution_count": 11,
=======
   "execution_count": 214,
>>>>>>> parent of 6a833ba ( n):Mini Project 4/Jason's Code copy.ipynb
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                     id  polarity1  subjectivity1  polarity2  subjectivity2  \\\n",
      "sentiment                                                                     \n",
      "positive   1.510000e+18   0.522873       0.320462   0.519823       0.316083   \n",
      "\n",
      "             change     volume  \n",
      "sentiment                       \n",
      "positive  -0.017812  2891966.0  \n",
      "                     id  polarity1  subjectivity1  polarity2  subjectivity2  \\\n",
      "sentiment                                                                     \n",
      "negative   1.510000e+18   -0.11448       0.250516  -0.124945       0.248111   \n",
      "\n",
      "             change     volume  \n",
      "sentiment                       \n",
      "negative  -0.020924  1684520.0  \n"
     ]
    }
   ],
   "source": [
    "neg_data = pd_data.sort_values('polarity2').head(20)\n",
    "pos_data = pd_data.sort_values('polarity2').tail(20)\n",
    "print(pos_data.groupby(['sentiment']).mean())\n",
    "print(neg_data.groupby(['sentiment']).mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Splitting Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "target = pd_data['change']\n",
    "features = pd_data[['polarity2','subjectivity2', 'volume']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<AxesSubplot:title={'center':'polarity2'}>,\n",
       "        <AxesSubplot:title={'center':'subjectivity2'}>],\n",
       "       [<AxesSubplot:title={'center':'volume'}>, <AxesSubplot:>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "features.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "target.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(features, target, random_state = 0, test_size = 0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# LinearRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "The model performance for training set\n",
      "--------------------------------------\n",
      "MSE is 0.000989703957106509\n",
      "RMSE is 0.031459560662960774\n",
      "R2 is -0.05230512108539087\n",
      "\n",
      "\n",
      "\n",
      "The model performance for training set\n",
      "--------------------------------------\n",
      "MSE is 0.0009504597205412137\n",
      "RMSE is 0.03082952676479504\n",
      "R2 is 0.017529547779639443\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "lr = LinearRegression()\n",
    "lr = lr.fit(X_train, y_train)\n",
    "\n",
    "prediction = lr.predict(X_test)\n",
    "\n",
    "mse = mean_squared_error(y_test, prediction)\n",
    "r2 = r2_score(y_test, prediction)\n",
    "\n",
    "print(\"\\nThe model performance for training set\")\n",
    "print(\"--------------------------------------\")\n",
    "print('MSE is {}'.format(mse))\n",
    "print('RMSE is {}'.format(np.sqrt(mse)))\n",
    "print('R2 is {}'.format(r2))\n",
    "\n",
    "print(\"\\n\")\n",
    "\n",
    "y_pred = cross_val_predict(LinearRegression(), features, target, cv=5)\n",
    "mse = mean_squared_error(target, y_pred)\n",
    "r2 = r2_score(target, y_pred)\n",
    "\n",
    "print(\"\\nThe model performance for training set\")\n",
    "print(\"--------------------------------------\")\n",
    "print('MSE is {}'.format(mse))\n",
    "print('RMSE is {}'.format(np.sqrt(mse)))\n",
    "print('R2 is {}'.format(r2))\n",
    "\n",
    "print(\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_predictions(actual, predict):\n",
    "    over = 0\n",
    "    over_num = 0\n",
    "    under = 0\n",
    "    under_num = 0\n",
    "    correct = 0\n",
    "    for i in range(len(actual)):\n",
    "        if actual[i] > predict[i]:\n",
    "            under += 1\n",
    "            under_num += abs(actual[i] - predict[i])\n",
    "        elif actual[i] < predict[i]:\n",
    "            over += 1\n",
    "            over_num += abs(actual[i] - predict[i])\n",
    "        else:\n",
    "            correct += 1\n",
    "    over_avg = over_num / over\n",
    "    under_avg = under_num / under\n",
    "    return (over, over_num, over_avg, under, under_num, under_avg, correct)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "def over_under(actual, pred):\n",
    "    right_neg = 0\n",
    "    wrong_neg = 0\n",
    "    right_pos = 0\n",
    "    wrong_pos = 0\n",
    "    for i in range(len(actual)):\n",
    "        if pred[i] < 0 and actual[i] < 0:\n",
    "            right_neg += 1\n",
    "        elif pred[i] < 0 and actual[i] > 0:\n",
    "            wrong_neg += 1\n",
    "        elif pred[i] > 0 and actual[i] > 0:\n",
    "            right_pos += 1\n",
    "        else:\n",
    "            wrong_pos += 1\n",
    "            \n",
    "    return (right_neg, wrong_neg, right_pos, wrong_pos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.03115101383583874"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "std_target = target.std()\n",
    "std_target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66\n",
      "66\n"
     ]
    }
   ],
   "source": [
    "print(len(prediction))\n",
    "y_test_list = list(y_test)\n",
    "print(len(y_test_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33\n",
      "0.8481519595523633\n",
      "0.025701574531889797\n",
      "33\n",
      "0.7620148563004941\n",
      "0.023091359281833156\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "preds = get_predictions(y_test_list, prediction)\n",
    "for pred in preds:\n",
    "    print(pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "327\n",
      "327\n"
     ]
    }
   ],
   "source": [
    "print(len(y_pred))\n",
    "y_test_list = list(target)\n",
    "print(len(y_test_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "148\n",
      "3.855980148964958\n",
      "0.026053919925438904\n",
      "179\n",
      "3.8619187834358324\n",
      "0.021574965270591242\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "preds = get_predictions(y_test_list, y_pred)\n",
    "for pred in preds:\n",
    "    print(pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "right negative: 240\n",
      "wrong negative: 86\n",
      "right positive: 0\n",
      "wrong positive: 1\n"
     ]
    }
   ],
   "source": [
    "outcomes = over_under(y_test_list, y_pred)\n",
    "print('right negative:', outcomes[0])\n",
    "print('wrong negative:', outcomes[1])\n",
    "print('right positive:', outcomes[2])\n",
    "print('wrong positive:', outcomes[3])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# KNRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.031459560662960774\n",
      "{'n_neighbors': 26}\n",
      "0.004060267655259719\n"
     ]
    }
   ],
   "source": [
    "# KNN Regression\n",
    "knn = KNeighborsRegressor()\n",
    "neighbors = list(range(1,51))\n",
    "\n",
    "param_grid = dict(n_neighbors = neighbors)\n",
    "knn_grid = GridSearchCV(knn, param_grid, cv=10)\n",
    "\n",
    "knn_grid.fit(features, target)\n",
    "y_pred = list(knn_grid.predict(features))\n",
    "knn_grid.score(features, target) \n",
    "knn_grid.best_params_\n",
    "mse = mean_squared_error(y_test, prediction)\n",
    "print(np.sqrt(mse))\n",
    "print(knn_grid.best_params_) \n",
    "print(knn_grid.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Mean Squared Error')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Graphing the MSE for each hyperparameter\n",
    "error = []\n",
    "for k in range(1,51):\n",
    "    knn = KNeighborsRegressor(n_neighbors=k)\n",
    "    y_pred = cross_val_predict(knn, features, target, cv=5)\n",
    "    error.append(mean_squared_error(target,y_pred))\n",
    "plt.plot(range(1,51),error)\n",
    "plt.xlabel('K nearest neighbors')\n",
    "plt.ylabel('Mean Squared Error')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random Forest"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD:Mini Project 4/Mini Project Code.ipynb
   "execution_count": 20,
=======
   "execution_count": 200,
>>>>>>> parent of 6a833ba ( n):Mini Project 4/Jason's Code copy.ipynb
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD:Mini Project 4/Mini Project Code.ipynb
       "array([-3.72017996e-02, -2.48440215e-02, -4.14461879e-02, -1.99075404e-02,\n",
       "       -6.81826831e-03, -1.85101682e-02, -4.16477172e-02, -5.48990563e-03,\n",
       "       -2.19164140e-02, -1.64164997e-02,  2.44654474e-02,  3.82387060e-03,\n",
       "       -1.75250008e-02, -1.26218051e-02, -1.24618904e-02, -7.36535184e-03,\n",
       "       -2.00764967e-02, -3.55672793e-02,  9.80229445e-03, -1.42521108e-02,\n",
       "       -3.78861514e-02, -2.58143817e-02, -2.90687300e-05, -2.21417504e-02,\n",
       "       -2.82268970e-02, -2.89930925e-02, -1.75310565e-02, -4.41298420e-03,\n",
       "       -4.06688091e-03, -5.18021477e-03, -4.12013741e-02, -3.78981592e-02,\n",
       "       -2.39078021e-02,  2.81749921e-03, -3.64037012e-02, -2.75642217e-02,\n",
       "       -8.64030351e-03, -1.55407095e-02, -4.95558030e-04, -3.28885873e-02,\n",
       "       -3.47157314e-02, -1.38575633e-02, -7.24537636e-03, -2.75080086e-02,\n",
       "        2.97239082e-02, -1.01066824e-02, -3.81158827e-03, -1.65065359e-02,\n",
       "       -1.66644415e-02, -2.11728565e-02, -2.87326501e-02,  2.19971497e-02,\n",
       "       -5.46789698e-02, -3.51262064e-02, -8.72885352e-03, -1.25536181e-02,\n",
       "       -9.07514502e-03, -2.24653307e-02, -2.20316188e-03, -2.90571391e-02,\n",
       "       -1.22736712e-02, -4.79758629e-02, -3.19710030e-03, -4.95879425e-02,\n",
       "       -9.91958531e-03, -2.23320785e-02])"
      ]
     },
     "execution_count": 20,
=======
       "array([-0.03976082, -0.02429768, -0.04043783, -0.01542017, -0.00801756,\n",
       "       -0.0230211 , -0.04304937, -0.00740905, -0.02887326, -0.01750323,\n",
       "        0.00770928,  0.00812422, -0.0183904 , -0.01714305, -0.00763439,\n",
       "       -0.00760416, -0.02544727, -0.02902161,  0.00887117, -0.01282362,\n",
       "       -0.03735695, -0.02579864, -0.00047562, -0.02805045, -0.02512047,\n",
       "       -0.03351454, -0.01642493, -0.00268606, -0.00484833, -0.00443878,\n",
       "       -0.03418323, -0.03390107, -0.01778632,  0.00682854, -0.03546924,\n",
       "       -0.02352301, -0.00823152, -0.01490271,  0.00217704, -0.02866033,\n",
       "       -0.03240992, -0.01257416, -0.00287299, -0.02341865,  0.0129575 ,\n",
       "       -0.01474576, -0.00627404, -0.01322694, -0.01904521, -0.01338967,\n",
       "       -0.02909354,  0.02055572, -0.05004654, -0.02936637, -0.01399923,\n",
       "       -0.0113201 , -0.00593868, -0.02165861, -0.00149055, -0.03191602,\n",
       "       -0.0112991 , -0.04909048, -0.00395524, -0.04011292, -0.00914836,\n",
       "       -0.03522706])"
      ]
     },
     "execution_count": 200,
>>>>>>> parent of 6a833ba ( n):Mini Project 4/Jason's Code copy.ipynb
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "rf = RandomForestRegressor(n_estimators = 100)\n",
    "rf.fit(X_train, y_train)\n",
    "y_pred = rf.predict(X_test)\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD:Mini Project 4/Mini Project Code.ipynb
   "execution_count": 21,
=======
   "execution_count": 201,
>>>>>>> parent of 6a833ba ( n):Mini Project 4/Jason's Code copy.ipynb
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD:Mini Project 4/Mini Project Code.ipynb
       "0.03272973865510573"
      ]
     },
     "execution_count": 21,
=======
       "0.03293422381168542"
      ]
     },
     "execution_count": 201,
>>>>>>> parent of 6a833ba ( n):Mini Project 4/Jason's Code copy.ipynb
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_squared_error(y_test, y_pred)\n",
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD:Mini Project 4/Mini Project Code.ipynb
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.13899404177520536"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2 = r2_score(y_test, y_pred)\n",
    "r2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
=======
   "execution_count": 197,
>>>>>>> parent of 6a833ba ( n):Mini Project 4/Jason's Code copy.ipynb
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'n_estimators': 100}\n",
      "-0.0011584813665867035\n"
     ]
    }
   ],
   "source": [
    "RF = RandomForestRegressor(random_state = 0)\n",
    "search_grid = {'n_estimators': [50 ,100, 150, 200]}\n",
    "search = GridSearchCV(estimator = RF, param_grid = search_grid, scoring = 'neg_mean_squared_error')\n",
    "search.fit(X_train, y_train)\n",
    "print(search.best_params_) \n",
    "print(search.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
